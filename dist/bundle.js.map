{"version":3,"sources":["webpack:///webpack/bootstrap 1ddae22bcce4c4266d78","webpack:///./src/Crossing.ts","webpack:///./src/Edge.ts","webpack:///./src/Node.ts","webpack:///./src/randomUtils.ts","webpack:///./src/main.ts","webpack:///./src/GUIHandler.ts","webpack:///./src/ColorScheme.ts","webpack:///./src/BoardGenerator.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1ddae22bcce4c4266d78","export default class Crossing {\r\n    constructor(public row: number, public col: number) { }\r\n    equals(otherCrossing: Crossing) {\r\n        return this.row === otherCrossing.row && this.col === otherCrossing.col;\r\n    }\r\n    moveIn(direction: any){\r\n        this.row += direction.row;\r\n        this.col += direction.col;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Crossing.ts","import Node from \"./Node\"\r\nimport Crossing from \"./Crossing\"\r\n\r\nexport default class Edge {\r\n    equivalentEdgeOrdering: number;\r\n    occupies: Crossing[];\r\n    constructor(public node1: Node, public node2: Node, allEdges: Edge[] = [], mode: string = null) {\r\n\r\n        this.equivalentEdgeOrdering = this.otherEquivalentEdgesCount(allEdges) + 1;\r\n        this.occupies = this.calculateOccupiedCrossings();\r\n    }\r\n    otherEquivalentEdgesCount(edges: Edge[]) {\r\n        var number = 0;\r\n\r\n        for (let edge of edges) {\r\n            if (Edge.areEquivalent(edge, this) && edge != this) { //equivalent edge but not same\r\n                number += 1;\r\n            }\r\n        }\r\n        return number;\r\n    }\r\n    isDoubleEdge(edges: Edge[]) {\r\n        let isDoubleEdge = false;\r\n\r\n        for (let edge of edges) {\r\n            if (Edge.areEquivalent(edge, this) && edge != this) { //equivalent edge but not same\r\n                isDoubleEdge = true;\r\n            }\r\n        }\r\n        return isDoubleEdge;\r\n    }\r\n    doesOccupy(crossing: Crossing){\r\n        for(let c of this.occupies){\r\n            if(c.equals(crossing)){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getEquivalentEdge(edges: Edge[]){\r\n        for(let edge of edges){\r\n            if(Edge.areEquivalent(edge, this) && edge != this){\r\n                return edge;\r\n            }\r\n        }\r\n        throw \"NoEquivalentEdgeFound\";\r\n    }\r\n    calculateOccupiedCrossings() {\r\n        var occupied: Crossing[] = [];\r\n        var fromNode = this.node1;\r\n        var toNode = this.node2;\r\n        if (fromNode.col === toNode.col) { //edge moves vertically\r\n            for (let row = Math.min(fromNode.row, toNode.row) + 1; row < Math.max(fromNode.row, toNode.row); row++) {\r\n                occupied.push(new Crossing(row, fromNode.col));\r\n            }\r\n        } else if (fromNode.row === toNode.row) { //edge moves horizontally\r\n            for (let col = Math.min(fromNode.col, toNode.col) + 1; col < Math.max(fromNode.col, toNode.col); col++) {\r\n                occupied.push(new Crossing(fromNode.row, col));\r\n            }\r\n        }\r\n        return occupied;\r\n    }\r\n    getOtherNode(node: Node){\r\n        if(node.equals(this.node1)){\r\n            return this.node2;\r\n        }else if(node.equals(this.node2)){\r\n            return this.node1;\r\n        }else{\r\n            throw \"Given Node not in Edge\";\r\n        }\r\n    }\r\n    \r\n    static areEquivalent(edge1: Edge, edge2: Edge) {\r\n        if ((edge1.node1 === edge2.node1 && edge1.node2 === edge2.node2) ||\r\n            (edge1.node2 === edge2.node1 && edge1.node1 === edge2.node2)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Edge.ts","import Edge from \"./Edge\";\r\nimport Crossing from \"./Crossing\";\r\nexport default class Node {\r\n    public crossing: Crossing;\r\n    constructor(row: number, col: number, public neededEdges: number = 0) {\r\n        this.crossing = new Crossing(row,col);\r\n        this.neededEdges = neededEdges;\r\n    }\r\n    getEdges(edges: Edge[]){\r\n        let foundEdges = new Array();\r\n        for(let edge of edges){\r\n            if(edge.node1 === this || edge.node2 === this){\r\n                foundEdges.push(edge);\r\n            }\r\n        }\r\n        return foundEdges;\r\n    }\r\n    edgeCount(edges: Edge[]){\r\n        return this.getEdges(edges).length;\r\n    }\r\n    get row(){ //shorthand\r\n        return this.crossing.row;\r\n    }\r\n    get col(){ //shorthand\r\n        return this.crossing.col;\r\n    }\r\n    equals(otherNode: Node){\r\n        return this.row === otherNode.row && this.col == otherNode.col;\r\n    }\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Node.ts","export function rndIntBetween(min: number, max: number) { // max excluded\r\n        return Math.floor(Math.random() * (max - min) ) + min;\r\n    };\r\nexport function randomChoice(arr: Array<any>){\r\n        return arr[rndIntBetween(0, arr.length)];\r\n    };\n\n\n// WEBPACK FOOTER //\n// ./src/randomUtils.ts","import Node from \"./Node\"\r\nimport Edge from \"./Edge\"\r\nimport Crossing from \"./Crossing\"\r\nimport GUI from \"./GUIHandler\"\r\nimport ColorScheme from \"./ColorScheme\"\r\nimport randomBoard from \"./BoardGenerator\"\r\nimport {rndIntBetween} from \"./randomUtils\"\r\n\r\nclass Game{\r\n    public nodes: Node[]\r\n    public edges: Edge[];\r\n    public gui: GUI;\r\n    public colorSchemes: ColorScheme[];\r\n    public solution: Edge[];\r\n    public over: boolean = false;\r\n    public messageTimer;\r\n    constructor(){\r\n        let boardSettings = {\r\n            rows:  5,\r\n            cols: 15,\r\n            gridLineWidth: 1,\r\n            spacing: 60,\r\n            nodeRadius: 20,\r\n            edgeWidth: 3\r\n        };\r\n        let  html = {\r\n            body: <HTMLBodyElement>document.getElementById(\"body\"),\r\n            messageBox: <HTMLDivElement>document.getElementById(\"messagebox\"),\r\n            boardContainer: <HTMLDivElement>document.getElementById(\"playboard-container\"),\r\n            buttonBox: <HTMLDivElement>document.getElementById(\"buttonbox\"),\r\n            canvas: <HTMLCanvasElement>document.getElementById(\"playboard\")\r\n        };\r\n        html.canvas.addEventListener(\"click\", this.handleClick.bind(this));\r\n        html.buttonBox.children[0].addEventListener(\"click\", this.nextColorScheme.bind(this));\r\n        html.buttonBox.children[1].addEventListener(\"click\", this.toggleGrid.bind(this));\r\n        html.buttonBox.children[2].addEventListener(\"click\", this.showSolution.bind(this));\r\n        html.buttonBox.children[3].addEventListener(\"click\", this.newRandomBoard.bind(this,\"easy\"));\r\n        html.buttonBox.children[4].addEventListener(\"click\", this.newRandomBoard.bind(this, \"medium\"));\r\n        html.buttonBox.children[5].addEventListener(\"click\", this.newRandomBoard.bind(this, \"hard\"));\r\n        \r\n        this.nodes = new Array();\r\n        this.edges = new Array();\r\n        this.colorSchemes = ColorScheme.getAll();\r\n        this.gui = new GUI(html, boardSettings, this.colorSchemes[0]);\r\n        \r\n        \r\n    }\r\n    \r\n\r\n    // -------- functions --------\r\n    newRandomBoard(difficulty: string = \"easy\"){\r\n        if(difficulty === \"easy\"){\r\n            this.gui.boardSettings.rows = rndIntBetween(5,7);\r\n            this.gui.boardSettings.cols = rndIntBetween(7,12);\r\n        }else if(difficulty === \"medium\"){\r\n            this.gui.boardSettings.rows = rndIntBetween(5,8);\r\n            this.gui.boardSettings.cols = rndIntBetween(9,14);\r\n        }else{\r\n            this.gui.boardSettings.rows = rndIntBetween(5,10);\r\n            this.gui.boardSettings.cols = rndIntBetween(10,15);\r\n        }\r\n        \r\n        let newBoard = randomBoard(this.gui.boardSettings.rows,this.gui.boardSettings.cols, difficulty);\r\n        this.nodes = newBoard.nodes;\r\n        this.edges = [];\r\n        this.solution = newBoard.solution;\r\n        this.gui.activeNode = null;\r\n        clearTimeout(this.messageTimer);\r\n        setTimeout(() => {this.gui.message.textContent = \"\"}, 5000);\r\n        this.gui.message.textContent = \"Good luck with your new game!\";\r\n        this.over = false;\r\n        this.gui.updateBoardSize();\r\n        this.gui.drawBoard(game.nodes, game.edges);\r\n    }\r\n    showSolution(){\r\n        this.edges = this.solution;\r\n        this.over = true;\r\n        game.gui.drawBoard(this.nodes, this.edges);\r\n        clearTimeout(this.messageTimer);\r\n        this.gui.message.textContent = \"Given up already? Try another one, you can do it!\"\r\n    }\r\n    toggleGrid(){\r\n        this.gui.showGrid = !this.gui.showGrid;\r\n        this.gui.drawBoard(this.nodes,this.edges, this.gui.activeNode);\r\n    }\r\n    gameWon(){\r\n        this.over = true;\r\n        clearTimeout(this.messageTimer);\r\n        this.gui.message.textContent = \"Congratulations, you did it! Time for another one?\"\r\n    }\r\n    checkGameState(){\r\n        if(haveAllNodesCorrectEdgeCount.bind(this)() && areAllNodesConnected.bind(this)()){\r\n            this.gameWon();\r\n        }\r\n\r\n        function haveAllNodesCorrectEdgeCount(){\r\n            return this.nodes.every(node => node.edgeCount(this.edges) === node.neededEdges);\r\n        }\r\n\r\n        function areAllNodesConnected(){\r\n            //use depth fist search to walk through the graph\r\n            //save all visited nodes into array\r\n            //after the search check if the \"visited\" array has as many member as we have nodes\r\n\r\n            var visited: Node[] = new Array();\r\n            depthFirstSearch.bind(this)(this.nodes[0]);\r\n            return visited.length === this.nodes.length;\r\n\r\n            function depthFirstSearch(node: Node){ \r\n                if(visited.includes(node)){\r\n                    return;\r\n                }\r\n                visited.push(node);\r\n                for (let edge of node.getEdges(this.edges)){\r\n                    if(!visited.includes(edge.getOtherNode(node))){ \r\n                        depthFirstSearch.bind(this)(edge.getOtherNode(node));\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    nextColorScheme(){\r\n        let curSchemeIndex = this.colorSchemes.indexOf(this.gui.colorScheme);\r\n        this.gui.setColorScheme(this.colorSchemes[(curSchemeIndex+1)%this.colorSchemes.length]);\r\n        this.gui.drawBoard(this.nodes, this.edges, this.gui.activeNode);\r\n    }\r\n\r\n    handleClick(event: any){\r\n        if(this.over) return;\r\n        let result = this.gui.processClick(event, this.nodes);\r\n        if (result.inputNodesForEdge !== null) {\r\n            let nodesToCheckForEdge = result.inputNodesForEdge;\r\n            try {\r\n                if (this.isValidEdge(nodesToCheckForEdge[0], nodesToCheckForEdge[1])) { //valid start and end point, create and add edge\t\r\n                    let egdeToAdd = new Edge(nodesToCheckForEdge[0], nodesToCheckForEdge[1], this.edges);\r\n                    this.edges.push(egdeToAdd);\r\n                }\r\n            } catch (error) {\r\n                if (error.type === \"EdgeNotValid\") { //start and endpoint not valid for edge\r\n                    handleCustomError.bind(this)(error);\r\n                } else {\r\n                    throw error; //do not catch errors but EdgeNotValid\r\n                }\r\n            }\r\n        }\r\n        this.gui.drawBoard(this.nodes, this.edges, result.activeNode);\r\n        this.checkGameState();\r\n\r\n        //----------- functions -------------\r\n\r\n        function handleCustomError(error: any) {\r\n            clearTimeout(this.messageTimer);\r\n            switch (error.message) { //display customized error message for user\r\n                case \"EdgeInPath\":\r\n                    this.gui.message.textContent =\"Edges are not allowed to cross other Edges.\";\r\n                    break;\r\n                case \"NodeInPath\":\r\n                    this.gui.message.textContent = \"Edges are not allowed to go over Nodes.\";\r\n                    break;\r\n                case \"DiagonalEdge\":\r\n                    this.gui.message.textContent = \"Edges are not allowed to be diagonal.\";\r\n                    break;\r\n                //TooManyEdgesOnNode is not thrown anymore, so the user hase a chance to correct\r\n                //bad edges from nodes which already have the number of edges they need\r\n                /*case \"TooManyEdgesOnNode\":\r\n                    this.gui.message.textContent = \"One of the Nodes you selected is not allowed to have more Edges\";\r\n                    this.edges = this.edges.filter(edge => !Edge.areEquivalent(edge, error.edge));  \r\n                    break;*/\r\n                case \"TooManyEdgesBetweenNodes\":\r\n                    this.gui.message.textContent = \"You cannot have more than two Edges between Nodes.\";\r\n                    \r\n                    // delete the double egde where the user tried to place three edges between nodes\r\n                    this.edges = this.edges.filter(edge => !Edge.areEquivalent(edge, error.edge)); \r\n                    break;\r\n                default:\r\n                    console.log(\"Unhandled EdgeNotValid Error\"); //shouldnt happen (and doesnt)\r\n                    break;\r\n            }\r\n            this.messageTimer = setTimeout(() => { this.gui.message.textContent = \"\"}, 5000); //hide error message after 5 seconds\r\n        }\r\n    }\r\n    isValidEdge(fromNode: Node, toNode: Node) {\r\n        let newEdge = new Edge(fromNode, toNode, this.edges);\r\n        if (newEdge.otherEquivalentEdgesCount(this.edges) >= 2) { //third equivalent edge but only two allowed\r\n            throw { type: \"EdgeNotValid\", message: \"TooManyEdgesBetweenNodes\", edge: newEdge };\r\n        }\r\n\r\n        if (!(fromNode.row === toNode.row) && !(fromNode.col === toNode.col)) { //edge is diagonal\r\n            throw { type: \"EdgeNotValid\", message: \"DiagonalEdge\" };\r\n        }\r\n        //do not throw TooManyEdgesOnNode so the user has a chance to exceed the edge limit in order to correct his input\r\n        /*if (fromNode.edgeCount(this.edges) === fromNode.neededEdges || toNode.edgeCount(this.edges) === toNode.neededEdges) {\r\n            throw { type: \"EdgeNotValid\", message: \"TooManyEdgesOnNode\", edge: newEdge};\r\n        }*/\r\n        for (const node of this.nodes) { //check if edge goes over other node\r\n            for (const crossing of newEdge.occupies) {\r\n                if (crossing.row === node.row && crossing.col === node.col) {\r\n                    throw { type: \"EdgeNotValid\", message: \"NodeInPath\" };\r\n                }\r\n            }\r\n        }\r\n        for (let oldEdge of this.edges) { //check if edge crosses other edge\r\n            if (Edge.areEquivalent(oldEdge, newEdge)) { //already checked if we already had 2 edges between the nodes, so if we have valid equivalent edge, this one is valid too\r\n                return true;\r\n            }\r\n            for (let newEdgeCrossing of newEdge.occupies) { //for every crossing newEdge occupies, check if oldEdge occupies it --> throw error\r\n                if (oldEdge.occupies.some(function (oldEdgeCrossing: any) {\r\n                    return oldEdgeCrossing.equals(newEdgeCrossing);\r\n                })) {\r\n                    throw { type: \"EdgeNotValid\", message: \"EdgeInPath\" };\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// ------ final call to start the game -------\r\n\r\nlet game = new Game();\r\ngame.newRandomBoard();\r\n//your example board ;) if you REALLY want to have a predefined board \r\n//instead of the random one, comment out the line above and uncomment out the lines below\r\n/*game.nodes.push(new Node(0,0,2), new Node(0,2,3), new Node(0,5,3), new Node(0,12,6), new Node(0,14,3),\r\n                    new Node(1,1,2), new Node(1,9,4), new Node(1,11,3),\r\n                    new Node(2,2,3), new Node(2,6,2), new Node(2,12,2),\r\n                    new Node(3,1,3), new Node(3,5,2), new Node(3,7,2), new Node(3,9,3),\r\n                    new Node(4,0,1), new Node(4,2,1), new Node(4,11,4), new Node(4,14,3));*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import Node from \"./Node\"\r\nimport Edge from \"./Edge\"\r\nimport ColorScheme from \"./ColorScheme\"\r\n\r\n\r\nexport default class GUIHandler {\r\n    activeNode: Node | null = null;\r\n    context: CanvasRenderingContext2D;\r\n    message: HTMLParagraphElement;\r\n    public showGrid: boolean = false;\r\n    constructor(private html: {body: HTMLBodyElement, messageBox: HTMLDivElement, boardContainer: HTMLDivElement, buttonBox: HTMLDivElement, canvas:HTMLCanvasElement},\r\n                public boardSettings: {rows: number, cols: number, gridLineWidth: number, spacing: number, nodeRadius: number, edgeWidth: number}, \r\n                public colorScheme: ColorScheme){ \r\n        \r\n        this.message = <HTMLParagraphElement>this.html.messageBox.children[1];\r\n        this.context = this.html.canvas.getContext(\"2d\");\r\n        this.updateBoardSize();\r\n        this.setColorScheme(colorScheme);\t\t\r\n    }\r\n    updateBoardSize(){\r\n        this.html.canvas.height = (this.boardSettings.rows + 1) * this.boardSettings.spacing + this.boardSettings.gridLineWidth;\r\n        this.html.canvas.width = (this.boardSettings.cols + 1) * this.boardSettings.spacing + this.boardSettings.gridLineWidth;\r\n\r\n        this.html.boardContainer.style.width = this.html.canvas.width + \"px\";\r\n        this.html.boardContainer.style.height = this.html.canvas.height + \"px\";\r\n    }\r\n    \r\n    setColorScheme(colorScheme: ColorScheme) {\r\n        this.colorScheme = colorScheme;\r\n\r\n        this.html.body.style.backgroundColor = colorScheme.backgroundColor;\r\n\r\n        this.html.messageBox.style.backgroundColor = colorScheme.accentColor;\r\n        this.html.messageBox.style.borderColor = colorScheme.accentColor2;\r\n        this.html.messageBox.style.color = colorScheme.backgroundColor; //font color\r\n\r\n        this.html.boardContainer.style.borderColor = colorScheme.accentColor;\r\n\r\n        this.html.buttonBox.style.backgroundColor = colorScheme.accentColor;\r\n        this.html.buttonBox.style.borderColor = colorScheme.accentColor2;\r\n\r\n        for (let i = 0; i < this.html.buttonBox.children.length; i++) {\r\n            var temp = <HTMLButtonElement>(this.html.buttonBox.children[i]);\r\n            temp.style.backgroundColor = colorScheme.backgroundColor;\r\n            temp.style.color = colorScheme.accentColor2; \r\n            \r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n    //return x or y of center of node\r\n    getX(node: Node) {\r\n        return (this.boardSettings.gridLineWidth / 2) + this.boardSettings.spacing * (node.col + 1);\r\n    }\r\n    getY(node: Node) {\r\n        return (this.boardSettings.gridLineWidth / 2) + this.boardSettings.spacing * (node.row + 1);\r\n    }\r\n    //return the x or y of where a first/second edge should start from, used if there is a double edge\r\n    firstEdgeX(node: Node) {\r\n        return this.getX(node) + this.boardSettings.nodeRadius / 4;\r\n    }\r\n    firstEdgeY(node: Node) {\r\n        return this.getY(node) + this.boardSettings.nodeRadius / 4;\r\n    }\r\n    secondEdgeX(node: Node) {\r\n        return this.getX(node) - this.boardSettings.nodeRadius / 4;\r\n    }\r\n    secondEdgeY(node: Node) {\r\n        return this.getY(node) - this.boardSettings.nodeRadius / 4;\r\n    }\r\n    processClick(event: any, nodes: Node[]) {\r\n        var clickX = event.offsetX;\r\n        var clickY = event.offsetY;\r\n        var clickedNode: Node = getClickedNode.bind(this)(clickX, clickY, nodes);\r\n        var resultingNodesForEdge: Node[] | null = null; // either the nodes of user input or null\r\n\r\n        if (clickedNode === null) { //click not on a node, nothing changes\r\n        } else if (this.activeNode === null) { //user chooses new starting point for edge\r\n            this.activeNode = clickedNode;\r\n        } else if (this.activeNode === clickedNode) { //click on already chosen starting point cancels edge selection\r\n            this.activeNode = null;\r\n        } else { //edge chosen, return it to check if it is valid\r\n            resultingNodesForEdge = new Array(this.activeNode,clickedNode);\r\n            this.activeNode = null;\r\n        }\r\n        return {activeNode: this.activeNode, inputNodesForEdge: resultingNodesForEdge};\r\n\r\n        /* --------- function defintion ---------*/\r\n\r\n        function getClickedNode(clickX: number, clickY: number, nodes: Node[]) {\r\n            for (let node of nodes) {\r\n                if (isClickInNode.bind(this)(clickX, clickY, node)) {\r\n                    return node;\r\n                }\r\n            }\r\n            return null;\r\n\r\n            function isClickInNode(x: number, y: number, node: Node) {\r\n                var dx = Math.abs(x - this.getX(node));\r\n                var dy = Math.abs(y - this.getY(node));\r\n                return (dx <= this.boardSettings.nodeRadius && dy <= this.boardSettings.nodeRadius);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    drawBoard(nodes: Node[], edges: Edge[], highlightNode: Node = null) {\r\n        this.context.clearRect(0, 0, this.html.canvas.width, this.html.canvas.height);\r\n        if(this.showGrid) drawGroundBoard.bind(this)();\r\n        drawGridTicks.bind(this)();\r\n        drawEdges.bind(this)(edges);\r\n        drawNodes.bind(this)(nodes, highlightNode);\r\n\r\n        /* --------- function defintion ---------*/\r\n\r\n        function drawNodes(nodes: Node[], highlightNode: Node = null) {\r\n            for (let node of nodes){\r\n                this.context.fillStyle = this.colorScheme.nodeColor;\r\n                this.context.beginPath();\r\n                this.context.arc(this.getX(node), this.getY(node), this.boardSettings.nodeRadius, 0, 2 * Math.PI);\r\n                this.context.fill();\r\n                this.context.closePath();\r\n\r\n                this.context.fillStyle = this.colorScheme.nodeFontColor;\r\n                this.context.font = this.boardSettings.nodeRadius + \"px Arial\";\r\n                this.context.textAlign = \"center\";\r\n                this.context.textBaseline = \"middle\";\r\n                this.context.fillText(node.neededEdges, this.getX(node),this.getY(node));\r\n\r\n                if (node === highlightNode) { // draw circle around highlightNode\r\n                    this.context.strokeStyle = this.colorScheme.highlightNodeColor;\r\n                    this.context.lineWidth = this.boardSettings.nodeRadius / 5;\r\n                    this.context.beginPath();\r\n                    this.context.arc(this.getX(node), this.getY(node), this.boardSettings.nodeRadius + this.context.lineWidth, 0, 2 * Math.PI);\r\n                    this.context.stroke();\r\n                    this.context.closePath();\r\n                }\r\n            }\r\n        }\r\n        function drawEdges(edges: Edge[]) {\r\n            for (let edge of edges) {\r\n                let node1 = edge.node1;\r\n                let node2 = edge.node2;\r\n                this.context.strokeStyle = this.colorScheme.edgeColor;\r\n                this.context.beginPath();\r\n                if(!edge.isDoubleEdge(edges)){ // means only edge between pair of nodes --> we can draw in the middle\r\n                    this.context.lineWidth = this.boardSettings.edgeWidth;\r\n                    this.context.moveTo(this.getX(node1), this.getY(node1));\r\n                    this.context.lineTo(this.getX(node2), this.getY(node2));\r\n                    this.context.stroke();\r\n                }else{\t\t\t\t\t\t\t//since there are 2 edges between the nodes we have to draw the edges slightly apart\r\n                    switch (edge.equivalentEdgeOrdering) {\r\n                        case 1:\r\n                            this.context.lineWidth = this.boardSettings.edgeWidth;\r\n                            this.context.moveTo(this.firstEdgeX(node1), this.firstEdgeY(node1));\r\n                            this.context.lineTo(this.firstEdgeX(node2), this.firstEdgeY(node2));\r\n                            this.context.stroke();\r\n                            break;\r\n                        case 2:\r\n                            this.context.lineWidth = this.boardSettings.edgeWidth;\r\n                            this.context.moveTo(this.secondEdgeX(node1), this.secondEdgeY(node1));\r\n                            this.context.lineTo(this.secondEdgeX(node2), this.secondEdgeY(node2));\r\n                            this.context.stroke();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        function drawGroundBoard() {\r\n            this.context.fillStyle = this.colorScheme.gridColor;\r\n            for (let i = 0; i < this.boardSettings.rows; i++) {\r\n                this.context.fillRect(this.boardSettings.spacing, (i + 1) * this.boardSettings.spacing,\r\n                    (this.boardSettings.cols - 1) * this.boardSettings.spacing + this.boardSettings.gridLineWidth, this.boardSettings.gridLineWidth);\r\n            }\r\n            for (let i = 0; i < this.boardSettings.cols; i++) {\r\n                this.context.fillRect((i + 1) * this.boardSettings.spacing, this.boardSettings.spacing,\r\n                    this.boardSettings.gridLineWidth, (this.boardSettings.rows - 1) * this.boardSettings.spacing + this.boardSettings.gridLineWidth);\r\n            }\r\n        }\r\n        function drawGridTicks() {\r\n            this.context.strokeStyle = this.colorScheme.accentColor2;\r\n            this.context.lineWidth = 3;\r\n            for (let i = 0; i < this.boardSettings.rows; i++) {\r\n                let node = new Node(i,0,1); //using node as workaround to be able to use getY\r\n                let y = this.getY(node);\r\n\r\n                this.context.beginPath(); //left board side ticks\r\n                this.context.moveTo(0,y);\r\n                this.context.lineTo(10,y);\r\n                this.context.stroke();\r\n\r\n                this.context.beginPath(); // right board side ticks\r\n                this.context.moveTo(this.html.canvas.width, y);\r\n                this.context.lineTo(this.html.canvas.width - 10,y);\r\n                this.context.stroke();\r\n            }\r\n            for (let i = 0; i < this.boardSettings.cols; i++) {\r\n                let node = new Node(0,i,1); //using node as workaround to be able to use getX\r\n                let x = this.getX(node);\r\n                \r\n                this.context.beginPath(); // up board side ticks\r\n                this.context.moveTo(x,0);\r\n                this.context.lineTo(x,10);\r\n                this.context.stroke();\r\n\r\n                this.context.beginPath(); // down board side ticks\r\n                this.context.moveTo(x,this.html.canvas.height);\r\n                this.context.lineTo(x,this.html.canvas.height - 10);\r\n                this.context.stroke();\r\n            }\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/GUIHandler.ts","export default class ColorScheme{\r\n    gridColor: string;\r\n    nodeColor: string;\r\n    highlightNodeColor: string;\r\n    edgeColor: string;\r\n    nodeFontColor: string;\r\n    backgroundColor: string;\r\n    accentColor: string;\r\n    accentColor2: string;\r\n\r\n    //constructor takes object instead of separate values for better readability in the static colorScheme functions\r\n\r\n    constructor(temp: {gridColor: string, nodeColor: string, highlightNodeColor: string, edgeColor: string, nodeFontColor: string, \r\n        backgroundColor: string, accentColor: string, accentColor2: string}){\r\n            this.gridColor = temp.gridColor;\r\n            this.nodeColor = temp.nodeColor;\r\n            this.highlightNodeColor = temp.highlightNodeColor;\r\n            this.edgeColor = temp.edgeColor;\r\n            this.nodeFontColor = temp.nodeFontColor;\r\n            this.backgroundColor = temp.backgroundColor;\r\n            this.accentColor = temp.accentColor;\r\n            this.accentColor2 = temp.accentColor2;\r\n        }\r\n    static getAll(){\r\n        return new Array(ColorScheme.blackOrangeRed(), ColorScheme.redGoldBlack(),\r\n         ColorScheme.goldWhiteGrey(), ColorScheme.blackWhiteBlue(), ColorScheme.whiteBlueGreen() );\r\n    }\r\n    static whiteBlueGreen() {\r\n        return new ColorScheme({\r\n            gridColor: \"rgba(20, 30, 30, 0.5)\",\r\n            nodeColor: \"rgba(0, 0, 0, 1)\",\r\n            highlightNodeColor: \"rgba(20, 20, 20, 0.9)\",\r\n            edgeColor: \"rgba(0, 220, 220, 1)\",\r\n            nodeFontColor: \"rgba(0, 220, 220, 1)\",\r\n            backgroundColor: \"rgba(215, 237, 255, 1)\",\r\n            accentColor: \"rgba(0, 100, 100, 0.8)\",\r\n            accentColor2: \"rgba(0, 0, 0, 1)\"\r\n        })\r\n        \r\n}\r\n    static blackOrangeRed() {\r\n        return new ColorScheme({\r\n            gridColor: \"rgba(200, 105, 105, 0.3)\",\r\n            nodeColor: \"rgba(200, 100, 0, 1)\",\r\n            highlightNodeColor: \"rgba(200, 160, 0, 0.95)\",\r\n            edgeColor: \"rgba(100, 0, 0, 1)\",\r\n            nodeFontColor: \"rgba(0, 0, 0, 1)\",\r\n            backgroundColor: \"rgba(0, 0, 0, 1)\",\r\n            accentColor: \"rgba(255, 100, 0, 0.8)\",\r\n            accentColor2: \"rgba(200, 160, 0, 1)\"\r\n        })\r\n    }\r\n    static redGoldBlack() {\r\n        return new ColorScheme({\r\n            gridColor: \"rgba(255, 255, 255, 0.6)\",\r\n            nodeColor: \"rgba(200, 160, 0, 1)\",\r\n            highlightNodeColor: \"rgba(200, 160, 0, 1)\",\r\n            edgeColor: \"rgba(0, 0, 0, 1)\",\r\n            nodeFontColor: \"rgba(0, 0, 0, 1)\",\r\n            backgroundColor: \"rgba(100, 0, 0, 1)\",\r\n            accentColor: \"rgba(200, 160, 0, 1)\",\r\n            accentColor2: \"rgba(0, 0, 0, 1)\"\r\n        })\r\n    }\r\n    static goldWhiteGrey() {\r\n        return new ColorScheme({\r\n            gridColor: \"rgba(255, 255, 255, 0.6)\",\r\n            nodeColor: \"rgba(255, 255, 200, 1)\",\r\n            highlightNodeColor: \"rgba(200, 200, 200, 0.8)\",\r\n            edgeColor: \"rgba(0, 0, 0, 0.8)\",\r\n            nodeFontColor: \"rgba(200, 160, 0, 1)\",\r\n            backgroundColor: \"rgba(200, 160, 0, 1)\",\r\n            accentColor: \"rgba(255, 255, 255, 0.8)\",\r\n            accentColor2: \"rgba(200, 200, 200, 1)\"\r\n        })\r\n    }\r\n    static blackWhiteBlue() {\r\n        return new ColorScheme({\r\n            gridColor: \"rgba(0, 0, 200, 0.2)\",\r\n            nodeColor: \"rgba(0, 0, 0, 1)\",\r\n            highlightNodeColor: \"rgba(0, 0, 200, 1)\",\r\n            edgeColor: \"rgba(0,0, 0, 1)\",\r\n            nodeFontColor: \"rgba(255, 255, 255, 1)\",\r\n            backgroundColor: \"rgba(255, 255, 255, 1)\",\r\n            accentColor: \"rgba(0, 0, 0, 1)\",\r\n            accentColor2: \"rgba(0, 0, 200, 1)\"\r\n        })\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ColorScheme.ts","import Node from \"./Node\"\r\nimport Edge from \"./Edge\"\r\nimport Crossing from \"./Crossing\"\r\nimport {rndIntBetween, randomChoice} from \"./randomUtils\"\r\n\r\n\r\nexport default function randomBoard(rows: number, cols: number, difficulty: string = \"easy\"){\r\n    var directions = {\r\n        up: {row: -1, col: 0},\r\n        down: {row: 1, col: 0},\r\n        right: {row: 0, col: 1},\r\n        left: {row: 0, col: -1}\r\n    }\r\n    switch(difficulty){\r\n        case \"easy\": var diffScaler = 1; break;\r\n        case \"medium\": var diffScaler = 2; break;\r\n        case \"hard\": var diffScaler = 3; break;\r\n    }\r\n    let nodes: Node[] = new Array();\r\n    let edges: Edge[] = new Array();\r\n    let startNode = new Node(rndIntBetween(0,rows), rndIntBetween(0,cols));\r\n    nodes.push(startNode);\r\n    //second parameter specifies the number of nodes on the board\r\n    //we place more nodes when difficulty is harder\r\n    fillBoardFrom(startNode, rows*cols/(5-diffScaler)); \r\n    for(let node of nodes){\r\n        node.neededEdges = node.edgeCount(edges);\r\n    }\r\n    return {nodes: nodes, solution: edges};\r\n    \r\n\r\n    // ----------------- helper functions -----------------\r\n\r\n    function fillBoardFrom(fromNode: Node, cutoff: number){\r\n        if(nodes.length >= cutoff){\r\n            return;\r\n        }\r\n        let posDirections = getPossibleDirectionsForNode(fromNode);\r\n        if(posDirections.length === 0) return fillBoardFrom(randomChoice(nodes), cutoff);\r\n        let chosen = randomChoice(posDirections);\r\n        let result = edgeWalker(new Crossing(fromNode.crossing.row + chosen.row, fromNode.crossing.col + chosen.col), chosen);\r\n        let newNode = new Node(result.crossing.row, result.crossing.col);\r\n        switch(result.flag){\r\n            case \"WalkedOnNode\": \r\n                edges.push(new Edge(fromNode, result.node, edges)); \r\n                if(Math.random() <= 0.5){ //chance for double edge\r\n                    edges.push(new Edge(fromNode, result.node, edges));\r\n                }\r\n                break;\r\n            case \"WalkedOnEdge\": //place node on edge(s), remove the old edge(s) and add new ones\r\n                var edgesToReplace = new Array(result.edge);\r\n                if(result.edge.isDoubleEdge(edges)){ // walked on double edge so we have to replace both\r\n                    edgesToReplace.push(result.edge.getEquivalentEdge(edges));\r\n                }\r\n                for(let edgeToReplace of edgesToReplace){\r\n                    edges = edges.filter(edge => edge != edgeToReplace); \r\n                    edges.push(new Edge(result.edge.node1, newNode, edges));\r\n                    edges.push(new Edge(newNode, result.edge.node2, edges));\r\n                }       \r\n                edges.push(new Edge(fromNode, newNode, edges));\r\n                nodes.push(newNode);\r\n                break;\r\n            case \"CreateNewNode\": \r\n                nodes.push(newNode);\r\n                edges.push(new Edge(fromNode, newNode, edges));\r\n                if(Math.random() <= 0.5){ //chance for double edge\r\n                    edges.push(new Edge(fromNode, newNode, edges));\r\n                }\r\n                break;                \r\n        }\r\n        return fillBoardFrom(randomChoice(nodes), cutoff);\r\n    }\r\n    function edgeWalker(crossing: Crossing, direction: any): any{\r\n        while (true) {\r\n            for(let oldEdge of edges){\r\n                if(oldEdge.occupies.some(oldEdgeCrossing => oldEdgeCrossing.equals(crossing))){ // walked into edge\r\n                    return {crossing: crossing, flag: \"WalkedOnEdge\", edge: oldEdge}; // place node on edge\r\n                }\r\n            }\r\n            for(let node1 of nodes){\r\n                if(node1.crossing.equals(crossing)){ // walked into node\r\n                    return {crossing: crossing, flag: \"WalkedOnNode\", node: node1}; //new Crossing(crossing.row - direction.row, crossing.col - direction.col); // place the node one step back\r\n                }\r\n            }\r\n            if(crossing.row + direction.row > rows - 1 || crossing.row + direction.row < 0 \r\n                || crossing.col + direction.col > cols - 1 || crossing.col + direction.col < 0){\r\n                return {crossing: crossing, flag:\"CreateNewNode\"};\r\n\r\n            }\r\n            if(Math.random() <= 0.5){ //chnace to create node\r\n                return {crossing: crossing, flag: \"CreateNewNode\"};\r\n            }\r\n            crossing.moveIn(direction); \r\n        }\r\n                \r\n    }\r\n    function getPossibleDirectionsForNode(node: Node){\r\n        let invalid = new Array();\r\n        let allDirections = [directions.up, directions.down, directions.left, directions.right];\r\n        let crossing = node.crossing;\r\n        if(crossing.col <= 0){\r\n            invalid.push(directions.left);\r\n        }\r\n        if(crossing.row <= 0){\r\n            invalid.push(directions.up);\r\n        }\r\n        if(crossing.col >= cols-1){\r\n            invalid.push(directions.right);\r\n        }\r\n        if(crossing.row >= rows-1){\r\n            invalid.push(directions.down);\r\n        }\r\n        for(let d of allDirections){\r\n            for(let edge of edges){\r\n                if(edge.doesOccupy(new Crossing(crossing.row + d.row, crossing.col + d.col))){\r\n                    invalid.push(d);\r\n                }\r\n            }\r\n            for(let node of nodes){\r\n                if(node.crossing.equals(new Crossing(crossing.row + d.row, crossing.col + d.col))){\r\n                    invalid.push(d);\r\n                }\r\n            }\r\n        }\r\n        \r\n        \r\n        return allDirections.filter(ele => !invalid.includes(ele));\r\n    }\r\n    \r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/BoardGenerator.ts"],"sourceRoot":""}